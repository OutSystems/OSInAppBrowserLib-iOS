name: Test Suite

on:
  push:
    branches: 
      - main
      - misc/RMET-4346/ci-cd  # Temporary for testing
  pull_request:
    types: [opened, synchronize, reopened]
    
jobs:
  test:
    name: Run Tests
    runs-on: macos-latest
    
    env:
      IOS_SIMULATOR_DEVICE: "iPhone 16"
      PROJECT_NAME: "OSInAppBrowserLib"                    # Name used for output files
      SCHEME_NAME: "OSInAppBrowserLib"                     # Xcode scheme to build/test
      XCODEPROJ_PATH: "OSInAppBrowserLib.xcodeproj"        # Path to .xcodeproj file
      COVERAGE_TARGET_FILTER: "OSInAppBrowserLib"          # Target name for coverage filtering
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Dependencies
        run: |
          # Install SwiftLint
          if ! command -v swiftlint &> /dev/null; then
            brew install swiftlint
          fi
          
          # Install xcpretty for better output formatting
          if ! gem list xcpretty -i &> /dev/null; then
            gem install xcpretty
          fi
          
          # Install slather for coverage conversion
          if ! gem list slather -i &> /dev/null; then
            gem install slather
          fi
          
      - name: Run Unit Tests
        run: |
          mkdir -p build/reports
          set -o pipefail
          xcodebuild test \
            -project ${{ env.XCODEPROJ_PATH }} \
            -scheme ${{ env.SCHEME_NAME }} \
            -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR_DEVICE }}" \
            -configuration Debug \
            -enableCodeCoverage YES \
            -resultBundlePath TestResults.xcresult \
            SKIP_SCRIPT_PHASES=YES \
            CODE_SIGNING_ALLOWED=NO \
            COMPILER_INDEX_STORE_ENABLE=NO | xcpretty --test --color --report junit --output build/reports/junit.xml
            
      - name: Generate Code Coverage Report for SonarQube
        run: |
          # Display coverage report for logs
          xcrun xccov view --report TestResults.xcresult
          
          # Extract coverage percentage and save to environment variable
          coverage_percentage=$(xcrun xccov view --report TestResults.xcresult | grep "${{ env.COVERAGE_TARGET_FILTER }}" | head -1 | grep -o '[0-9]\+\.[0-9]\+%' | head -1)
          if [ -z "$coverage_percentage" ]; then
            # Fallback: try to get overall coverage
            coverage_percentage=$(xcrun xccov view --report TestResults.xcresult | grep -E "^\s*[0-9]+\.[0-9]+%" | head -1 | grep -o '[0-9]\+\.[0-9]\+%')
          fi
          
          if [ -n "$coverage_percentage" ]; then
            echo "COVERAGE_PERCENTAGE=$coverage_percentage" >> $GITHUB_ENV
            echo "‚úÖ Code coverage: $coverage_percentage"
          else
            echo "COVERAGE_PERCENTAGE=N/A" >> $GITHUB_ENV
            echo "‚ö†Ô∏è Could not extract coverage percentage"
          fi
          
          # Create sonar-reports directory
          mkdir -p sonar-reports
          
          # Use Slather to convert coverage to SonarQube format
          if slather coverage \
            --sonarqube-xml \
            --output-directory sonar-reports \
            --scheme ${{ env.SCHEME_NAME }} \
            ${{ env.XCODEPROJ_PATH }}; then
            
            # Verify coverage file was generated
            if [ -f "sonar-reports/sonarqube-generic-coverage.xml" ]; then
              echo "‚úÖ Coverage converted successfully with Slather"
              echo "üìÑ Generated: sonar-reports/sonarqube-generic-coverage.xml"
            else
              echo "‚ö†Ô∏è Slather succeeded but output file not found in expected location"
              echo "üìÅ Files in sonar-reports:"
              ls -la sonar-reports/ || echo "Directory doesn't exist"
            fi
          else
            echo "‚ùå Slather failed to generate coverage report"
            echo "‚ÑπÔ∏è SonarCloud will run without coverage data"
            echo "üîç This is usually due to no test coverage or build issues"
          fi
          
      - name: Run SwiftLint for SonarQube
        run: |
          mkdir -p sonar-reports
          swiftlint --reporter checkstyle > sonar-reports/${{ env.PROJECT_NAME }}-swiftlint.xml || true
          
      - name: Setup SonarQube Scanner
        uses: warchant/setup-sonar-scanner@v8
        
      - name: Send to SonarCloud
        id: sonarcloud
        run: sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            TestResults.xcresult
            sonar-reports/
            build/reports/
            
      # Slack notification - Uncomment when ready to use
      # - name: Slack Notification
      #   if: always()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     fields: repo,message,commit,author,action,eventName,ref,workflow
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        
      - name: Comment Test Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            
            // Get Xcode version dynamically
            const xcodeVersion = execSync('xcodebuild -version | head -1', { encoding: 'utf8' }).trim();
            
            // Get coverage percentage from environment
            const coveragePercentage = process.env.COVERAGE_PERCENTAGE || 'N/A';
            
            // Check if SonarCloud step succeeded by checking job status
            const sonarStepSucceeded = '${{ steps.sonarcloud.outcome }}' === 'success';
            
            // Dynamic message based on SonarCloud success/failure
            const sonarMessage = sonarStepSucceeded 
              ? '‚òÅÔ∏è **SonarCloud**: Analysis completed - [View detailed report ‚Üí](https://sonarcloud.io)'
              : '‚ö†Ô∏è **SonarCloud**: Upload failed - check workflow logs for details';
            
            const nextStepsMessage = sonarStepSucceeded
              ? 'üìã **Next Steps**: Review the SonarCloud analysis for code quality insights and coverage details.'
              : 'üìã **Next Steps**: Coverage data is available in test artifacts. SonarCloud integration needs attention.';
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üß™ Test Results

              ‚úÖ **Tests**: All tests passed successfully!
              üìä **Code Coverage**: ${coveragePercentage}
              ${sonarMessage}

              **Environment:**
              - ${xcodeVersion}
              - iOS Simulator (${{ env.IOS_SIMULATOR_DEVICE }})
              - macOS runner: ${{ runner.os }}
              
              ${nextStepsMessage}`
            });
